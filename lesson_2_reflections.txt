Q: What happens when you initialize a repository? Why do you need to do it?

A: When you initialize a repository, it creates a new git repository in the current directory. You need this to begin keeping track of changes to your project.

Q: How is the staging area different from the working directory and the repository? What value do you think it offers?

A: The staging area is different from the WD and the repo because it sits in between them, as a temporary measure. The staging area is valuable because it allows you to plan out which files will be committed.

Q: How can you use the staging area to make sure you have one commit per logical change?

A: If you use the command "git diff" with no argument, it will show you the differences between your working directory and the staging area. Inspecting this difference will allow you to review if there is more than one logical change happening in the current commit.

Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A: Branches would be helpful when you want to work on a different version of your code that could be considered separate from your main version.

Q: How do the diagrams help you visualize the branch structure?

A: By providing a visual depiction of the branches(?).

Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A: The tip of each branch is compared to the other, and also with the last commit before the split (into two branches) occurred. This way, 'git' can determine how to merge the two files (from the tips) together in such a way that only the code that is supposed to remain actually makes it into the newest commit (the successfuly merged file). Now the commits from each branch are included in the new branches history, and sorted via time stamp.